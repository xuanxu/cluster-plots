<turbo-frame id="plots">
  <%= render "plots/loading_plot_data" %>

  <div class="font-bold space-x-4 mt-6 text-red-900">
  <i class='fa-duotone fa-solid fa-chart-line'></i> PLOTS
  </div>
  <div id="plots_data" class="container mx-auto mt-3 px-4 py-2 max-w-7xl bg-white shadow-md">
    <!--
    <p>Start date: <%= @start_date %></p>
    <p>Start time: <%= @start_time %></p>
    <p>Stop date: <%= @stop_date %></p>
    <p>Stop time: <%= @stop_time %></p>

    <ol>
      <% @p.each do |panel| %>
        <li><%= panel %></li>
      <% end %>
    </ol>
    -->
  </div>
  <div id="highcharts_plot"></div>


  <script>

    function show_plot(jsonData){
      const json_panels = JSON.parse(jsonData);
      const json = json_panels.panels_arr[0].subpanels[0];
      const default_line_thickness = 2;
      const font_size = '11px';

      var sub_height = json.size + '%';
	    // custom ticks ?
      var flag_ticks = json.ytickflag;
      if (flag_ticks == 1) {
        tick_val = json.ytickval;
      } else {
        tick_val = undefined;
      }

      if (json.rotate == 0) {
        yoffset = 80;
        ywidth = 150;
      } else {
        yoffset = 60;
        ywidth = undefined;
      }
      var subTop = 100 - json.size;
      var axisLineWidth = 1;
      var axisTickWidth = 2;

      var majorGridDisplay = 1;
      var minorGridDisplay = 1;
      var yrange = json.yrange_caa;

      if (json.type == 'line') {
        //store data
        //----------
        var num_lines = json.plot.length;

        series = [];
        for (var l = 0; l < num_lines; l++) {

          if  (json_panels.panels_arr[0].panel_type == 'status') {
            line_thickness =  json.plot[l].thick;
          } else {
            line_thickness = default_line_thickness;
          }

          if (json.plot[l].legend == 0) {
            display_legend = false;
            name = json.plot[l].name;
          } else {
            display_legend = true;
            name = json.plot[l].name;
          }

          if (json.plot[l].type == 'scatter') {
            symbol = 'cross';
            radius = 3;
            line_width = 0;
            marker_line_width = 2;
            enabled = true;
          } else {
            symbol = 'circle';
            radius = line_thickness/2.;
            line_width = line_thickness;
            enabled = undefined;
            marker_line_width = 0;
          }

          line = {
            name: name,
            type: json.plot[l].type,
            showInLegend: display_legend,
            color: json.plot[l].color,
            lineWidth: line_width,
            data: json.plot[l].data,
            marker: {
              enabled: enabled,
              symbol:  symbol,
              radius:  radius,
              lineColor: null,
              lineWidth: marker_line_width
            }
          }

          series.push(line);
        }
      }

      new Highcharts.Chart({
        chart: {
          type: 'line',
          renderTo: 'highcharts_plot',
          zoomType: 'x',
          events:{
            selection: function (event) {
              return zoom(event,div);
            },
            // Add the plot label (eg: C1 EFW)
            load: function () {
              var label = this.renderer.label(json_panels.panels_arr[0].label)
              .css({
                width: '80px',
                color: '#222',
                fontSize: '11px'
              })
              .attr({
                'stroke': 'silver',
                'stroke-width': 2,
                'r': 5,
                'padding': 10
              })
              .add();
                label.align(Highcharts.extend(label.getBBox(), {
                  align: 'right',
                  verticalAlign: 'top',
                  y: -5,
                  x: -7
                }), null, 'spacingBox');
            }
          }
        },
        xAxis: {
          type: 'datetime',
          title: {
            text: json_panels.panels_arr[0].xtitle || 'Time'
          }
        },
        yAxis: [
          {
            title: {
              enabled: true,
              rotation: json.rotate,
              offset: yoffset,
              style :{
                fontSize: font_size,
                width: ywidth
              },
              text: json.ytitle
            },
            tickPositions: tick_val,
            labels: {
              style: { fontSize: font_size },
              formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                if (flag_ticks == 1) {
                  tickvalues = json.ytickval;
                  ticknames = json.yticktxt;
                  idx = tickvalues.findIndex(tic => tic === this.value);
                  return ticknames[idx];
                } else {
                  return label;
                }
              }
            },
            height: sub_height,
            top: subTop + '%',
            offset: 0,
            minPadding: 0,
            maxPadding: 0,
            min: yrange[0],
            max: yrange[1],
            startOnTick: false,
            endOnTick: false,
            lineWidth: axisLineWidth,
            tickWidth: axisTickWidth,
            type: json.ytype,
            minorTicks: true,
            minorTicksLength: 5,
            minorTickWidth: 1,
            gridLineWidth: majorGridDisplay,
            minorGridLineWidth: minorGridDisplay,
          },
          { // axis on the opposite side to "close" the box
            title: { enabled: false },
            opposite: true,
            labels: { enabled: false },
            height: sub_height,
            top: subTop + '%',
            offset: 0,
            minPadding: 0,
            maxPadding: 0,
            min: yrange[0],
            max: yrange[1],
            startOnTick: false,
            endOnTick: false,
            lineWidth: axisLineWidth,
            tickWidth: axisTickWidth,
            type: json.ytype,
            minorTicks: true,
            minorTicksLength: 5,
            minorTickWidth: 1,
            gridLineWidth: majorGridDisplay,
            minorGridLineWidth: minorGridDisplay,
            gridZIndex: 1
          }
        ],
        // data
        series: series,
      });
    }

    show_plot('<%= @plot_info.to_json.html_safe %>');

  </script>
</turbo-frame>
